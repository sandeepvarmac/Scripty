'use client'

import React, { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Progress } from "@/components/ui/progress"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Separator } from "@/components/ui/separator"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuLabel,
  DropdownMenuSeparator,
} from "@/components/ui/dropdown-menu"
import {
  ArrowLeft,
  FileText,
  Clock,
  Users,
  MapPin,
  Film,
  Sun,
  Moon,
  Play,
  ChevronDown,
  Download,
  MessageSquare,
  Search,
  BarChart4,
  BookOpen,
  AlertTriangle,
  CheckCircle,
  Settings,
  Eye,
  Zap,
  RefreshCw,
  Brain,
  Layers,
  Target,
  TrendingUp,
  AlertCircle,
  Globe,
  Shield,
  PaintBucket,
  CheckSquare,
  DollarSign,
  Calendar,
  Gauge,
  Share2,
  FileX,
  Archive,
  Activity,
} from "lucide-react"
import {
  LineChart,
  Line,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
  AreaChart,
  Area,
} from "recharts"

// Mock data for demonstration
const mockScript = {
  title: "Dark Echo",
  author: "Alex Thompson",
  format: "PDF",
  pages: 6,
  scenes: 5,
  characters: 6,
  runtime: 15,
  project: "Thriller Collection",
  uploadedAt: "2024-03-15",
  complexity: "Medium",
  genre: "Thriller"
}

const mockScenes = [
  {
    id: 1,
    number: "1",
    title: "INT. APARTMENT 3B - DAY",
    pages: "1-2",
    characters: ["SARAH", "MIKE"],
    issues: 1,
    notes: true,
    beats: false,
    pacing: true,
    feasibility: false,
    risk: false,
    screenplay: `INT. APARTMENT 3B - DAY

SARAH (20s) sits alone at a small kitchen table, staring at her phone. The apartment is sparse, with unpacked boxes scattered around.

SARAH
(into phone)
I know you're worried, but I'm fine. Really.

MIKE (O.S.)
(filtered, concerned)
Sarah, you haven't left that place in three days. This isn't healthy.

Sarah walks to the window, peering through the blinds at the street below.

SARAH
The street's too loud. Too many people. I just need... quiet.

MIKE (O.S.)
(filtered)
I'm coming over.

SARAH
No! Don't. I said I'm fine.

She hangs up abruptly, her hands shaking slightly.`
  },
  {
    id: 2,
    number: "2",
    title: "INT. APARTMENT 3B - DAY",
    pages: "2-3",
    characters: ["SARAH", "VOICE"],
    issues: 0,
    notes: false,
    beats: true,
    pacing: false,
    feasibility: false,
    risk: false,
    screenplay: `INT. APARTMENT 3B - DAY (CONTINUOUS)

Sarah moves to the kitchen, opens the refrigerator. It's nearly empty. She grabs a bottle of water.

As she drinks, a VOICE echoes faintly from somewhere in the building.

VOICE (O.S.)
(muffled, distant)
...help me...

Sarah freezes, water bottle halfway to her lips. She looks toward the door.

SARAH
Hello?

Silence. She waits, listening intently.

VOICE (O.S.)
(barely audible)
...please...

Sarah approaches the door cautiously, pressing her ear against it.

SARAH
(whisper)
Who's there?

Only silence answers back.`
  },
  {
    id: 3,
    number: "3",
    title: "INT. BACK ALLEY - DAY",
    pages: "3-4",
    characters: ["SARAH", "STRANGER"],
    issues: 2,
    notes: true,
    beats: false,
    pacing: true,
    feasibility: true,
    risk: true,
    screenplay: `INT. BACK ALLEY BEHIND APARTMENT - DAY

Sarah exits through a rear door, looking around nervously. The alley is narrow, cluttered with dumpsters and debris.

She pulls out her phone, dials.

SARAH
(into phone, urgent)
Mike? I heard something. In the building.

A STRANGER emerges from behind a dumpster - disheveled, wild-eyed.

STRANGER
You heard it too, didn't you? The voice?

Sarah backs away, phone still pressed to her ear.

SARAH
(to stranger)
Stay away from me.

STRANGER
(stepping closer)
It's been calling for weeks. No one listens. No one helps.

SARAH
Mike, I need you to come now.

The Stranger reaches out desperately.

STRANGER
You have to help her! She's trapped!

Sarah turns and runs back toward the building.`
  },
  {
    id: 4,
    number: "4",
    title: "INT. STAIRWELL - DAY",
    pages: "4-5",
    characters: ["SARAH"],
    issues: 0,
    notes: false,
    beats: true,
    pacing: false,
    feasibility: false,
    risk: false,
    screenplay: `INT. APARTMENT BUILDING STAIRWELL - DAY

Sarah rushes up the stairs, breathing heavily. The stairwell is dimly lit, shadows dancing on the walls.

She pauses on the second floor landing, listening.

The VOICE returns, clearer now, seeming to come from above.

VOICE (O.S.)
(echoing in stairwell)
Sarah... can you hear me?

Sarah looks up the stairwell, her heart racing.

SARAH
(whisper)
This isn't real. You're not real.

VOICE (O.S.)
(more insistent)
Floor three. The door at the end.

Against her better judgment, Sarah begins climbing toward the third floor.

SARAH
(to herself)
Just go back to your apartment. Lock the door.

But her feet keep moving upward, as if drawn by an invisible force.`
  },
  {
    id: 5,
    number: "5",
    title: "EXT. ROOFTOP - DAY",
    pages: "5-6",
    characters: ["SARAH", "MIKE"],
    issues: 1,
    notes: true,
    beats: false,
    pacing: false,
    feasibility: false,
    risk: false,
    screenplay: `EXT. APARTMENT BUILDING ROOFTOP - DAY

Sarah bursts through the rooftop door, gasping. The city sprawls below her, but she's focused on something else.

In the corner of the rooftop, partially hidden behind an air conditioning unit, she sees a FIGURE huddled in shadows.

SARAH
(calling out)
Hello? Are you okay?

As she approaches, MIKE appears in the stairwell doorway behind her.

MIKE
Sarah! There you are. I've been looking everywhere.

SARAH
(not turning around)
Mike, do you see her? The woman?

Mike follows her gaze to the empty corner.

MIKE
Sarah... there's no one there.

Sarah turns to him, tears in her eyes.

SARAH
But I heard her. She called my name.

MIKE
(gently)
Let's go home. Together.

As they walk toward the stairwell, Sarah glances back one final time. For just a moment, a SHADOW seems to move in the corner.

FADE OUT.`
  },
]

const mockFullScreenplay = mockScenes.map(scene => scene.screenplay).join('\n\n')

const mockCharacters = [
  { name: "SARAH", scenes: 5, lines: 42, arc: "Protagonist", development: 8.5 },
  { name: "MIKE", scenes: 2, lines: 18, arc: "Supporting", development: 6.2 },
  { name: "VOICE", scenes: 1, lines: 8, arc: "Antagonist", development: 4.1 },
  { name: "STRANGER", scenes: 1, lines: 12, arc: "Minor", development: 3.8 },
]

const pieData = [
  { name: 'Interior', value: 60, color: '#3b82f6' },
  { name: 'Exterior', value: 40, color: '#10b981' },
]

const paceData = [
  { scene: 1, pages: 2, tension: 3, runtime: 3.2 },
  { scene: 2, pages: 1, tension: 5, runtime: 1.8 },
  { scene: 3, pages: 2, tension: 8, runtime: 3.5 },
  { scene: 4, pages: 1, tension: 6, runtime: 1.9 },
  { scene: 5, pages: 2, tension: 9, runtime: 4.1 },
]

const feasibilityData = [
  { category: "Budget", score: 7.2, max: 10 },
  { category: "Locations", score: 8.5, max: 10 },
  { category: "Cast", score: 9.1, max: 10 },
  { category: "Effects", score: 6.8, max: 10 },
  { category: "Schedule", score: 8.0, max: 10 },
]

export function ComprehensiveAnalysisPage() {
  const [activeTab, setActiveTab] = useState("overview")
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [fullScreenplayOpen, setFullScreenplayOpen] = useState(false)
  const [selectedScene, setSelectedScene] = useState<typeof mockScenes[0] | null>(null)

  const runAnalysis = (type: string) => {
    setIsAnalyzing(true)
    setTimeout(() => setIsAnalyzing(false), 2000)
  }

  const handleSceneClick = (scene: typeof mockScenes[0]) => {
    setSelectedScene(scene)
  }

  const craftSections = [
    {
      id: "structure",
      title: "Structure & Beats",
      icon: BookOpen,
      description: "Three-act structure, plot points, and story progression",
      status: "completed",
      score: 7.8
    },
    {
      id: "conflict",
      title: "Conflict & Theme",
      icon: Target,
      description: "Central conflicts, thematic elements, and emotional resonance",
      status: "completed",
      score: 8.2
    },
    {
      id: "dialogue",
      title: "Dialogue Quality",
      icon: MessageSquare,
      description: "Dialogue authenticity, subtext, and voice differentiation",
      status: "pending",
      score: null
    },
    {
      id: "world",
      title: "World & Logic",
      icon: Globe,
      description: "World-building consistency, logic, and believability",
      status: "completed",
      score: 6.9
    },
    {
      id: "genre",
      title: "Genre & Market",
      icon: TrendingUp,
      description: "Genre conventions, market positioning, and commercial appeal",
      status: "pending",
      score: null
    },
    {
      id: "formatting",
      title: "Formatting",
      icon: PaintBucket,
      description: "Industry-standard formatting and presentation",
      status: "completed",
      score: 9.1
    },
    {
      id: "sensitivity",
      title: "Sensitivity Analysis",
      icon: Shield,
      description: "Content sensitivity, representation, and potential issues",
      status: "completed",
      score: 8.7
    },
    {
      id: "risk",
      title: "Risk Flags",
      icon: AlertTriangle,
      description: "Production risks, legal concerns, and budget implications",
      status: "completed",
      score: 7.4
    }
  ]

  return (
    <div className="min-h-screen bg-background">
      {/* Simplified Header */}
      <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <div className="container flex h-14 items-center justify-between">
          <div className="flex items-center space-x-4">
            <Button variant="ghost" size="sm">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Dashboard
            </Button>
            <div className="font-semibold">ScriptyBoy</div>
          </div>

          <div className="flex items-center space-x-2">
            <Button variant="ghost" size="sm">
              <Search className="h-4 w-4" />
            </Button>
            <Button variant="ghost" size="sm">
              <Settings className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </header>

      <div className="container mx-auto p-6 max-w-7xl">
        {/* Clean Script Header */}
        <div className="mb-6">
          <div className="flex items-start justify-between mb-4">
            <div>
              <h1 className="text-3xl font-bold mb-2">{mockScript.title}</h1>
              <p className="text-muted-foreground">
                by {mockScript.author} • {mockScript.project}
              </p>
            </div>

            {/* Consolidated Actions */}
            <div className="flex items-center space-x-3">
              <div className="flex items-center space-x-2">
                <Button
                  onClick={() => runAnalysis('quick')}
                  disabled={isAnalyzing}
                  className="bg-primary hover:bg-primary/90"
                >
                  {isAnalyzing ? (
                    <RefreshCw className="h-4 w-4 animate-spin mr-2" />
                  ) : (
                    <Zap className="h-4 w-4 mr-2" />
                  )}
                  {isAnalyzing ? 'AI Analyzing...' : '⚡ Quick Overview'}
                </Button>

                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="outline" size="icon">
                      <ChevronDown className="h-4 w-4" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end" className="w-80">
                    <DropdownMenuLabel>Quick Analysis</DropdownMenuLabel>
                    <DropdownMenuItem onClick={() => runAnalysis('quick')}>
                      <Zap className="h-4 w-4 mr-2" />
                      ⚡ Quick Overview
                      <span className="ml-auto text-xs text-brand">1-2 min</span>
                    </DropdownMenuItem>

                    <DropdownMenuSeparator />
                    <DropdownMenuLabel>Detailed Analysis</DropdownMenuLabel>
                    <DropdownMenuItem onClick={() => runAnalysis('structure')}>
                      <BookOpen className="h-4 w-4 mr-2" />
                      Story Structure
                      <span className="ml-auto text-xs text-brand">3-5 min</span>
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => runAnalysis('characters')}>
                      <Users className="h-4 w-4 mr-2" />
                      Character Development
                      <span className="ml-auto text-xs text-brand">3-5 min</span>
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => runAnalysis('dialogue')}>
                      <MessageSquare className="h-4 w-4 mr-2" />
                      Dialogue Quality
                      <span className="ml-auto text-xs text-brand">3-5 min</span>
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => runAnalysis('pacing')}>
                      <Activity className="h-4 w-4 mr-2" />
                      Pacing & Flow
                      <span className="ml-auto text-xs text-brand">3-5 min</span>
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => runAnalysis('theme')}>
                      <Target className="h-4 w-4 mr-2" />
                      Theme Analysis
                      <span className="ml-auto text-xs text-brand">3-5 min</span>
                    </DropdownMenuItem>

                    <DropdownMenuSeparator />
                    <DropdownMenuLabel>Complete Coverage</DropdownMenuLabel>
                    <DropdownMenuItem onClick={() => runAnalysis('comprehensive')}>
                      <Brain className="h-4 w-4 mr-2" />
                      🎬 Full Professional Coverage
                      <span className="ml-auto text-xs text-brand">5-10 min</span>
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>

              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="outline">
                    <Download className="h-4 w-4 mr-2" />
                    Export
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                  <DropdownMenuLabel>Downloads</DropdownMenuLabel>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem>Coverage PDF</DropdownMenuItem>
                  <DropdownMenuItem>Notes CSV</DropdownMenuItem>
                  <DropdownMenuItem>JSON Bundle</DropdownMenuItem>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem>FDX Change List</DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>

              <Button variant="outline">
                <MessageSquare className="h-4 w-4 mr-2" />
                Chat
              </Button>
            </div>
          </div>

          {/* Metric Cards */}
          <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-4 mb-6">
            <Card className="p-4 text-center">
              <FileText className="h-6 w-6 mx-auto mb-2 text-muted-foreground" />
              <div className="text-lg font-semibold">{mockScript.format}</div>
              <div className="text-xs text-muted-foreground">File Format</div>
            </Card>
            <Card className="p-4 text-center">
              <BookOpen className="h-6 w-6 mx-auto mb-2 text-muted-foreground" />
              <div className="text-lg font-semibold">{mockScript.pages}</div>
              <div className="text-xs text-muted-foreground">Pages</div>
            </Card>
            <Card className="p-4 text-center">
              <Layers className="h-6 w-6 mx-auto mb-2 text-muted-foreground" />
              <div className="text-lg font-semibold">{mockScript.scenes}</div>
              <div className="text-xs text-muted-foreground">Scenes</div>
            </Card>
            <Card className="p-4 text-center">
              <Users className="h-6 w-6 mx-auto mb-2 text-muted-foreground" />
              <div className="text-lg font-semibold">{mockScript.characters}</div>
              <div className="text-xs text-muted-foreground">Characters</div>
            </Card>
            <Card className="p-4 text-center">
              <Clock className="h-6 w-6 mx-auto mb-2 text-muted-foreground" />
              <div className="text-lg font-semibold">~{mockScript.runtime}m</div>
              <div className="text-xs text-muted-foreground">Runtime</div>
            </Card>
            <Card className="p-4 text-center">
              <Film className="h-6 w-6 mx-auto mb-2 text-muted-foreground" />
              <div className="text-lg font-semibold">60/40</div>
              <div className="text-xs text-muted-foreground">INT/EXT</div>
            </Card>
            <Card className="p-4 text-center">
              <Sun className="h-6 w-6 mx-auto mb-2 text-muted-foreground" />
              <div className="text-lg font-semibold">80/20</div>
              <div className="text-xs text-muted-foreground">Day/Night</div>
            </Card>
          </div>

          {/* Analysis Progress */}
          <div className="flex items-center space-x-4 p-4 bg-muted/20 rounded-lg">
            <div className="flex items-center space-x-2">
              <CheckCircle className="h-4 w-4 text-green-600" />
              <span className="text-sm font-medium">5 analyses complete</span>
            </div>
            <div className="flex items-center space-x-2">
              <Clock className="h-4 w-4 text-amber-600" />
              <span className="text-sm text-muted-foreground">3 pending</span>
            </div>
            <div className="flex-1">
              <Progress value={62} className="h-2" />
            </div>
          </div>
        </div>

        <div className="grid grid-cols-12 gap-6">
          {/* Scene Sidebar */}
          <div className="col-span-12 xl:col-span-5">
            <Card className="h-[700px] flex flex-col">
              <CardHeader className="pb-3 flex-shrink-0">
                <div className="flex items-center justify-between">
                  <CardTitle className="text-lg">Scene Overview</CardTitle>
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => setFullScreenplayOpen(true)}
                  >
                    <FileText className="h-4 w-4 mr-2" />
                    View Full Screenplay
                  </Button>
                </div>
                <div className="flex items-center space-x-2">
                  <Input
                    placeholder="Search scenes..."
                    className="h-8"
                  />
                  <Button size="sm" variant="ghost">
                    <Eye className="h-4 w-4" />
                  </Button>
                </div>
              </CardHeader>
              <CardContent className="p-0 flex-1 flex flex-col">
                <ScrollArea className="flex-1">
                  <div className="space-y-2 p-4">
                    {mockScenes.map((scene) => (
                      <div
                        key={scene.id}
                        className="p-3 rounded-lg border hover:bg-muted/50 cursor-pointer transition-colors"
                        onClick={() => handleSceneClick(scene)}
                      >
                        <div className="flex items-start justify-between">
                          <div className="space-y-2 flex-1">
                            <div className="flex items-center space-x-2">
                              <Badge variant="outline" className="text-xs font-mono">
                                #{scene.number}
                              </Badge>
                              <span className="text-xs text-muted-foreground">
                                pp. {scene.pages}
                              </span>
                            </div>
                            <div className="font-medium text-sm">{scene.title}</div>
                            <div className="flex flex-wrap gap-1">
                              {scene.characters.map((char) => (
                                <Badge key={char} variant="secondary" className="text-xs">
                                  {char}
                                </Badge>
                              ))}
                            </div>
                            <div className="flex items-center gap-1">
                              {scene.notes && (
                                <AlertTriangle className="h-3 w-3 text-amber-600" title="Notes present" />
                              )}
                              {scene.beats && (
                                <Target className="h-3 w-3 text-sky-600" title="Beat anchor" />
                              )}
                              {scene.pacing && (
                                <Clock className="h-3 w-3 text-purple-600" title="Pacing outlier" />
                              )}
                              {scene.feasibility && (
                                <Layers className="h-3 w-3 text-emerald-600" title="Feasibility flag" />
                              )}
                              {scene.risk && (
                                <Shield className="h-3 w-3 text-red-600" title="Risk flag" />
                              )}
                            </div>
                          </div>
                          {scene.issues > 0 && (
                            <Badge variant="destructive" className="text-xs">
                              {scene.issues}
                            </Badge>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </ScrollArea>
              </CardContent>
            </Card>
          </div>

          {/* Main Analysis Tabs */}
          <div className="col-span-12 xl:col-span-7">
            <Card className="h-[700px] flex flex-col">
              <Tabs value={activeTab} onValueChange={setActiveTab} className="flex flex-col h-full">
              <CardHeader className="pb-3 flex-shrink-0">
                <TabsList className="grid grid-cols-4 lg:grid-cols-8 gap-2 w-full">
                <TabsTrigger value="overview">Overview</TabsTrigger>
                <TabsTrigger value="coverage">Coverage</TabsTrigger>
                <TabsTrigger value="craft">Craft</TabsTrigger>
                <TabsTrigger value="characters">Characters</TabsTrigger>
                <TabsTrigger value="pacing">Pacing</TabsTrigger>
                <TabsTrigger value="feasibility">Feasibility</TabsTrigger>
                <TabsTrigger value="notes">Notes</TabsTrigger>
                <TabsTrigger value="exports">Exports</TabsTrigger>
                </TabsList>
              </CardHeader>

              <CardContent className="flex-1 flex flex-col overflow-hidden p-4">

              {/* OVERVIEW TAB */}
              <TabsContent value="overview" className="flex-1 mt-0">
                <ScrollArea className="h-full">
                  <div className="space-y-6 p-1">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-lg">Story Structure</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-3">
                        <div className="flex justify-between text-sm">
                          <span>Setup (Act I)</span>
                          <span className="font-medium">Scenes 1-2</span>
                        </div>
                        <div className="flex justify-between text-sm">
                          <span>Confrontation (Act II)</span>
                          <span className="font-medium">Scene 3</span>
                        </div>
                        <div className="flex justify-between text-sm">
                          <span>Resolution (Act III)</span>
                          <span className="font-medium">Scenes 4-5</span>
                        </div>
                        <Progress value={75} className="mt-4" />
                        <p className="text-xs text-muted-foreground">Structure analysis: 75% aligned</p>
                      </div>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader>
                      <CardTitle className="text-lg">Location Distribution</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="h-48">
                        <ResponsiveContainer width="100%" height="100%">
                          <PieChart>
                            <Pie
                              data={pieData}
                              cx="50%"
                              cy="50%"
                              outerRadius={60}
                              dataKey="value"
                            >
                              {pieData.map((entry, index) => (
                                <Cell key={`cell-${index}`} fill={entry.color} />
                              ))}
                            </Pie>
                            <Tooltip />
                          </PieChart>
                        </ResponsiveContainer>
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="md:col-span-2">
                    <CardHeader>
                      <CardTitle className="text-lg">Pacing & Tension Flow</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="h-64">
                        <ResponsiveContainer width="100%" height="100%">
                          <LineChart data={paceData}>
                            <CartesianGrid strokeDasharray="3 3" />
                            <XAxis dataKey="scene" />
                            <YAxis />
                            <Tooltip />
                            <Line type="monotone" dataKey="tension" stroke="#3b82f6" strokeWidth={2} />
                          </LineChart>
                        </ResponsiveContainer>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </TabsContent>

              {/* COVERAGE TAB */}
              <TabsContent value="coverage" className="space-y-6 mt-6">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Professional Coverage Report</CardTitle>
                    <CardDescription>AI-generated screenplay analysis and recommendations</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <Card className="p-4">
                          <div className="text-center">
                            <div className="text-2xl font-bold text-primary">7.8</div>
                            <div className="text-sm text-muted-foreground">Overall Score</div>
                          </div>
                        </Card>
                        <Card className="p-4">
                          <div className="text-center">
                            <div className="text-2xl font-bold text-green-600">RECOMMEND</div>
                            <div className="text-sm text-muted-foreground">Decision</div>
                          </div>
                        </Card>
                        <Card className="p-4">
                          <div className="text-center">
                            <div className="text-2xl font-bold text-amber-600">MEDIUM</div>
                            <div className="text-sm text-muted-foreground">Budget Tier</div>
                          </div>
                        </Card>
                      </div>

                      <div className="prose prose-sm max-w-none">
                        <h4>Logline</h4>
                        <p>A young woman trapped in her apartment building discovers that the voices she hears aren't just in her head, leading to a terrifying confrontation with reality.</p>

                        <h4>Synopsis</h4>
                        <p>DARK ECHO is a tightly-paced psychological thriller that effectively builds tension through its confined setting and unreliable narrator. The script demonstrates strong understanding of genre conventions while offering fresh takes on familiar themes.</p>

                        <h4>Strengths</h4>
                        <ul>
                          <li>Strong opening that immediately establishes tone and character</li>
                          <li>Effective use of limited locations to build claustrophobic atmosphere</li>
                          <li>Well-developed protagonist with clear motivation and arc</li>
                        </ul>

                        <h4>Areas for Development</h4>
                        <ul>
                          <li>Supporting characters could benefit from more development</li>
                          <li>Some dialogue feels expository in Scene 3</li>
                          <li>The resolution could be expanded for greater impact</li>
                        </ul>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              {/* CRAFT TAB - Now with Cards instead of Nested Tabs */}
              <TabsContent value="craft" className="space-y-6 mt-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {craftSections.map((section) => {
                    const IconComponent = section.icon
                    return (
                      <Card key={section.id} className="cursor-pointer hover:shadow-md transition-shadow">
                        <CardContent className="pt-6">
                          <div className="flex items-start space-x-4">
                            <div className="p-2 bg-muted rounded-lg">
                              <IconComponent className="h-5 w-5" />
                            </div>
                            <div className="flex-1">
                              <div className="flex items-center justify-between mb-2">
                                <h3 className="font-semibold">{section.title}</h3>
                                <div className="flex items-center space-x-2">
                                  {section.score && (
                                    <Badge variant="outline" className="text-xs">
                                      {section.score}/10
                                    </Badge>
                                  )}
                                  <div className={`h-2 w-2 rounded-full ${
                                    section.status === 'completed' ? 'bg-green-500' :
                                    section.status === 'pending' ? 'bg-amber-500' : 'bg-gray-300'
                                  }`} />
                                </div>
                              </div>
                              <p className="text-sm text-muted-foreground mb-3">
                                {section.description}
                              </p>
                              <Button variant="outline" size="sm" className="w-full">
                                <Eye className="h-4 w-4 mr-2" />
                                View Analysis
                              </Button>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    )
                  })}
                </div>
              </TabsContent>

              {/* CHARACTERS TAB */}
              <TabsContent value="characters" className="space-y-6 mt-6">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Character Analysis</CardTitle>
                    <CardDescription>Character development, arcs, and dialogue distribution</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Character</TableHead>
                          <TableHead>Scenes</TableHead>
                          <TableHead>Lines</TableHead>
                          <TableHead>Arc Type</TableHead>
                          <TableHead>Development Score</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {mockCharacters.map((character) => (
                          <TableRow key={character.name}>
                            <TableCell className="font-medium">{character.name}</TableCell>
                            <TableCell>{character.scenes}</TableCell>
                            <TableCell>{character.lines}</TableCell>
                            <TableCell>
                              <Badge variant="outline">{character.arc}</Badge>
                            </TableCell>
                            <TableCell>
                              <div className="flex items-center space-x-2">
                                <Progress value={character.development * 10} className="w-16" />
                                <span className="text-sm font-medium">{character.development}/10</span>
                              </div>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </CardContent>
                </Card>
              </TabsContent>

              {/* PACING TAB */}
              <TabsContent value="pacing" className="space-y-6 mt-6">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-lg">Scene Pacing</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="h-64">
                        <ResponsiveContainer width="100%" height="100%">
                          <BarChart data={paceData}>
                            <CartesianGrid strokeDasharray="3 3" />
                            <XAxis dataKey="scene" />
                            <YAxis />
                            <Tooltip />
                            <Bar dataKey="runtime" fill="#3b82f6" />
                          </BarChart>
                        </ResponsiveContainer>
                      </div>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader>
                      <CardTitle className="text-lg">Tension Curve</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="h-64">
                        <ResponsiveContainer width="100%" height="100%">
                          <AreaChart data={paceData}>
                            <CartesianGrid strokeDasharray="3 3" />
                            <XAxis dataKey="scene" />
                            <YAxis />
                            <Tooltip />
                            <Area type="monotone" dataKey="tension" stroke="#10b981" fill="#10b981" fillOpacity={0.3} />
                          </AreaChart>
                        </ResponsiveContainer>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </TabsContent>

              {/* FEASIBILITY TAB */}
              <TabsContent value="feasibility" className="space-y-6 mt-6">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Production Feasibility</CardTitle>
                    <CardDescription>Budget requirements and production complexity analysis</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {feasibilityData.map((item) => (
                        <div key={item.category} className="flex items-center space-x-4">
                          <div className="w-20 text-sm font-medium">{item.category}</div>
                          <div className="flex-1">
                            <Progress value={(item.score / item.max) * 100} className="h-3" />
                          </div>
                          <div className="w-12 text-sm font-medium text-right">
                            {item.score}/{item.max}
                          </div>
                        </div>
                      ))}
                    </div>
                    <Separator className="my-6" />
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <Card className="p-4">
                        <div className="text-center">
                          <DollarSign className="h-8 w-8 mx-auto mb-2 text-green-600" />
                          <div className="text-lg font-semibold">$150K - $500K</div>
                          <div className="text-xs text-muted-foreground">Estimated Budget</div>
                        </div>
                      </Card>
                      <Card className="p-4">
                        <div className="text-center">
                          <Calendar className="h-8 w-8 mx-auto mb-2 text-blue-600" />
                          <div className="text-lg font-semibold">12-18 days</div>
                          <div className="text-xs text-muted-foreground">Shoot Schedule</div>
                        </div>
                      </Card>
                      <Card className="p-4">
                        <div className="text-center">
                          <Gauge className="h-8 w-8 mx-auto mb-2 text-amber-600" />
                          <div className="text-lg font-semibold">Medium</div>
                          <div className="text-xs text-muted-foreground">Complexity</div>
                        </div>
                      </Card>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              {/* NOTES TAB */}
              <TabsContent value="notes" className="space-y-6 mt-6">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Scene Notes & Recommendations</CardTitle>
                    <CardDescription>AI-generated insights and suggested improvements</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div className="p-4 border rounded-lg">
                        <div className="flex items-start space-x-3">
                          <AlertTriangle className="h-4 w-4 text-amber-500 mt-0.5 flex-shrink-0" />
                          <div>
                            <h4 className="font-medium">Scene 3: Pacing Issue</h4>
                            <p className="text-sm text-muted-foreground mt-1">
                              The confrontation scene feels rushed. Consider adding more buildup to the tension before the reveal. The dialogue could use more subtext to enhance the psychological impact.
                            </p>
                            <div className="flex items-center space-x-2 mt-2">
                              <Badge variant="outline" className="text-xs">Scene 3</Badge>
                              <Badge variant="secondary" className="text-xs">Pacing</Badge>
                            </div>
                          </div>
                        </div>
                      </div>

                      <div className="p-4 border rounded-lg">
                        <div className="flex items-start space-x-3">
                          <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" />
                          <div>
                            <h4 className="font-medium">Strong Opening</h4>
                            <p className="text-sm text-muted-foreground mt-1">
                              Scene 1 effectively establishes character, setting, and tone. The visual storytelling is particularly strong, allowing the audience to understand Sarah's situation without heavy exposition.
                            </p>
                            <div className="flex items-center space-x-2 mt-2">
                              <Badge variant="outline" className="text-xs">Scene 1</Badge>
                              <Badge variant="secondary" className="text-xs">Structure</Badge>
                            </div>
                          </div>
                        </div>
                      </div>

                      <div className="p-4 border rounded-lg">
                        <div className="flex items-start space-x-3">
                          <AlertCircle className="h-4 w-4 text-blue-500 mt-0.5 flex-shrink-0" />
                          <div>
                            <h4 className="font-medium">Character Development Opportunity</h4>
                            <p className="text-sm text-muted-foreground mt-1">
                              Mike's character could benefit from more development. Consider adding a scene that shows his relationship with Sarah before the crisis to give more emotional weight to their interactions.
                            </p>
                            <div className="flex items-center space-x-2 mt-2">
                              <Badge variant="outline" className="text-xs">Multiple Scenes</Badge>
                              <Badge variant="secondary" className="text-xs">Character</Badge>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              {/* EXPORTS TAB */}
              <TabsContent value="exports" className="space-y-6 mt-6">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Export & Share</CardTitle>
                    <CardDescription>Download analysis reports and share insights</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <Button className="h-20 flex-col" variant="outline">
                        <FileText className="h-6 w-6 mb-2" />
                        <span>Coverage Report</span>
                        <span className="text-xs text-muted-foreground">Professional PDF</span>
                      </Button>
                      <Button className="h-20 flex-col" variant="outline">
                        <BarChart4 className="h-6 w-6 mb-2" />
                        <span>Analytics Dashboard</span>
                        <span className="text-xs text-muted-foreground">Interactive charts</span>
                      </Button>
                      <Button className="h-20 flex-col" variant="outline">
                        <Download className="h-6 w-6 mb-2" />
                        <span>Raw Data</span>
                        <span className="text-xs text-muted-foreground">JSON export</span>
                      </Button>
                      <Button className="h-20 flex-col" variant="outline">
                        <Archive className="h-6 w-6 mb-2" />
                        <span>Notes Package</span>
                        <span className="text-xs text-muted-foreground">All annotations</span>
                      </Button>
                      <Button className="h-20 flex-col" variant="outline">
                        <Share2 className="h-6 w-6 mb-2" />
                        <span>Share Link</span>
                        <span className="text-xs text-muted-foreground">Collaborative view</span>
                      </Button>
                      <Button className="h-20 flex-col" variant="outline">
                        <FileX className="h-6 w-6 mb-2" />
                        <span>FDX Changes</span>
                        <span className="text-xs text-muted-foreground">Revision notes</span>
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              </CardContent>
              </Tabs>
            </Card>
          </div>
        </div>

        {/* Full Screenplay Dialog */}
        <Dialog open={fullScreenplayOpen} onOpenChange={setFullScreenplayOpen}>
          <DialogContent className="max-w-4xl max-h-[80vh]">
            <DialogHeader>
              <DialogTitle>Full Screenplay - {mockScript.title}</DialogTitle>
            </DialogHeader>
            <ScrollArea className="h-[60vh] p-4">
              <pre className="whitespace-pre-wrap font-mono text-sm leading-relaxed">
                {mockFullScreenplay}
              </pre>
            </ScrollArea>
          </DialogContent>
        </Dialog>

        {/* Scene Dialog */}
        <Dialog open={!!selectedScene} onOpenChange={() => setSelectedScene(null)}>
          <DialogContent className="max-w-3xl max-h-[80vh]">
            <DialogHeader>
              <DialogTitle>
                {selectedScene ? `Scene ${selectedScene.number}: ${selectedScene.title}` : ''}
              </DialogTitle>
            </DialogHeader>
            <ScrollArea className="h-[60vh] p-4">
              <pre className="whitespace-pre-wrap font-mono text-sm leading-relaxed">
                {selectedScene?.screenplay}
              </pre>
            </ScrollArea>
          </DialogContent>
        </Dialog>
      </div>
    </div>
  )
}