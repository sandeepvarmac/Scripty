generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

// Auth & RBAC Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String     @id @default(cuid())
  email             String     @unique
  emailVerified     DateTime?
  name              String?
  firstName         String?
  lastName          String?
  image             String?
  passwordHash      String?

  // Profile & Preferences
  projectType       ProjectType @default(FEATURE_INDEPENDENT)
  privacyDoNotTrain Boolean     @default(true)
  retentionDays     Int         @default(90)
  emailNotifications Boolean    @default(true)

  // RBAC
  roleId            String?
  role              Role?       @relation(fields: [roleId], references: [id])
  organizationId    String?
  organization      Organization? @relation(fields: [organizationId], references: [id])

  // Timestamps
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  lastLoginAt       DateTime?

  // Billing & Plans
  stripeCustomerId  String?
  plan              PlanType     @default(FREE)
  planStartedAt     DateTime?
  planExpiresAt     DateTime?
  analysesUsed      Int          @default(0)
  analysesLimit     Int          @default(3) // Free tier default

  // Relations
  accounts          Account[]
  sessions          Session[]
  authLogs          AuthLog[]
  refreshTokens     RefreshToken[]
  organizationMemberships OrganizationMember[]
  subscriptions     Subscription[]
  usageRecords      UsageRecord[]
  projects          Project[]
  scripts           Script[]
  analyses          Analysis[]

  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions Json     @default("[]")
  isDefault   Boolean  @default(false)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]

  @@map("roles")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
  members     OrganizationMember[]

  @@map("organizations")
}

model OrganizationMember {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           MemberRole   @default(MEMBER)

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("organization_members")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime

  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model AuthLog {
  id        String   @id @default(cuid())
  userId    String?
  email     String?
  action    AuthAction
  success   Boolean
  ipAddress String?
  userAgent String?
  metadata  Json?

  createdAt DateTime @default(now())

  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("auth_logs")
}

model RateLimit {
  id        String   @id @default(cuid())
  key       String   @unique
  points    Int      @default(0)
  expiresAt DateTime

  @@map("rate_limits")
}

// Enums
enum ProjectType {
  SHORT_FILM
  FEATURE_INDEPENDENT
  FEATURE_MAINSTREAM
  WEB_SERIES
  TV_SERIES
  OTHER
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
}

enum AuthAction {
  SIGN_UP
  SIGN_IN
  SIGN_OUT
  PASSWORD_RESET
  EMAIL_VERIFY
  TOKEN_REFRESH
  FAILED_LOGIN
  ACCOUNT_LOCKED
}

enum PlanType {
  FREE
  SOLO
  PRO
  SHOWRUNNER
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELED
  PAST_DUE
  UNPAID
}

enum BudgetRange {
  MICRO          // Under $500K
  LOW            // $500K - $5M
  MEDIUM         // $5M - $25M
  HIGH           // $25M+
}

enum DevelopmentStage {
  FIRST_DRAFT
  REVISION
  POLISH
  PRODUCTION_READY
  IN_PRODUCTION
  COMPLETED
}

// Billing & Subscription Models
model Subscription {
  id                String             @id @default(cuid())
  userId            String
  stripeSubscriptionId String?         @unique
  stripePriceId     String?
  plan              PlanType
  status            SubscriptionStatus @default(ACTIVE)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean           @default(false)
  canceledAt         DateTime?
  trialStart         DateTime?
  trialEnd           DateTime?

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model UsageRecord {
  id        String   @id @default(cuid())
  userId    String
  type      String   // "analysis", "export", etc.
  quantity  Int      @default(1)
  metadata  Json?    // Additional usage details

  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("usage_records")
}

// Project & Script Management Models
model Project {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?  @db.Text
  type        ProjectType
  genre       String?  // AI-detected or user-specified primary genre
  targetBudget BudgetRange @default(LOW)
  targetAudience String? @default("General")
  developmentStage DevelopmentStage @default(FIRST_DRAFT)

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  scripts     Script[]

  @@map("projects")
}

// Script Analysis & Evidence Store Models
model Script {
  id               String   @id @default(cuid())
  userId           String
  projectId        String?  // Optional during migration
  originalFilename String
  title            String?
  author           String?
  format           ScriptFormat
  fileSize         Int
  pageCount        Int
  totalScenes      Int      @default(0)
  totalCharacters  Int      @default(0)

  // Version tracking
  versionMajor     Int      @default(1)
  versionMinor     Int      @default(0)
  versionLabel     String?  // e.g., "First Draft", "Producer Notes", "Final"
  isLatestVersion  Boolean  @default(true)

  // Processing status
  status           ProcessingStatus @default(PENDING)
  uploadedAt       DateTime @default(now())
  processedAt      DateTime?

  // File storage
  fileUrl          String?  // S3/storage URL for original file

  // MVP Analysis fields
  logline          String?  @db.Text
  synopsisShort    String?  @db.Text @map("synopsis_short")
  synopsisLong     String?  @db.Text @map("synopsis_long")
  genreOverride    String?  @map("genre_override")
  comps            Json?

  // Soft delete
  deletedAt        DateTime?

  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project          Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  scenes           Scene[]
  characters       Character[]
  analyses         Analysis[]

  // MVP Analysis relations
  beats            Beat[]
  notes            Note[]
  scores           Score[]
  pageMetrics      PageMetric[]
  themeStatements  ThemeStatement[]
  riskFlags        RiskFlag[]
  subplots         Subplot[]

  @@index([projectId, versionMajor, versionMinor])
  @@index([projectId, isLatestVersion])
  @@map("scripts")
}

model Scene {
  id           String    @id @default(cuid())
  scriptId     String
  sceneNumber  String?
  type         SceneType
  content      String    @db.Text
  pageNumber   Int
  lineNumber   Int
  character    String?   // For dialogue scenes

  // Scene position and context
  orderIndex   Int       // Sequential order in script
  wordCount    Int       @default(0)

  // MVP Analysis fields
  intExt       IntExtEnum? @map("int_ext")
  location     String?
  tod          String?
  pageStart    Int?      @map("page_start")
  pageEnd      Int?      @map("page_end")

  // Analysis data will be stored here
  analysisData Json?     // Flexible storage for AI analysis results

  createdAt    DateTime  @default(now())
  deletedAt    DateTime?

  // Relations
  script       Script    @relation(fields: [scriptId], references: [id], onDelete: Cascade)
  evidences    Evidence[]

  // MVP Analysis relations
  elements     Element[]
  notes        Note[]
  feasibility  FeasibilityMetric?
  characterLinks CharacterScene[]
  themeAlignment SceneThemeAlignment?
  riskFlags    RiskFlag[]
  subplotSpans SubplotSpan[]

  @@index([scriptId, orderIndex])
  @@index([scriptId, type])
  @@index([scriptId, character])
  @@map("scenes")
}

model Character {
  id           String   @id @default(cuid())
  scriptId     String
  name         String
  dialogueCount Int     @default(0)
  firstAppearance Int?  // Line number of first appearance

  // MVP Analysis fields
  aliases      String[]

  // Character analysis
  analysisData Json?   // AI-generated character insights

  createdAt    DateTime @default(now())
  deletedAt    DateTime?

  // Relations
  script       Script   @relation(fields: [scriptId], references: [id], onDelete: Cascade)

  // MVP Analysis relations
  sceneLinks   CharacterScene[]

  @@unique([scriptId, name])
  @@map("characters")
}

model Evidence {
  id           String      @id @default(cuid())
  sceneId      String
  type         EvidenceType
  content      String      @db.Text
  context      String?     @db.Text // Surrounding context for evidence
  confidence   Float       // AI confidence score 0-1

  // Evidence metadata
  startLine    Int?        // Start line in original script
  endLine      Int?        // End line in original script
  tags         String[]    // Searchable tags

  // MVP Analysis fields
  area         NoteArea?

  createdAt    DateTime    @default(now())
  deletedAt    DateTime?

  // Relations
  scene        Scene       @relation(fields: [sceneId], references: [id], onDelete: Cascade)

  // MVP Analysis relations
  notes        Note[]

  @@index([sceneId, type])
  @@index([type, confidence])
  @@map("evidence")
}

model Analysis {
  id           String        @id @default(cuid())
  scriptId     String
  userId       String
  type         AnalysisType
  status       AnalysisStatus @default(PENDING)

  // Analysis results
  results      Json?         // Main analysis results
  score        Float?        // Overall score if applicable
  summary      String?       @db.Text

  // Processing info
  startedAt    DateTime      @default(now())
  completedAt  DateTime?
  errorMessage String?       @db.Text
  deletedAt    DateTime?

  // Relations
  script       Script        @relation(fields: [scriptId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("analyses")
}

// Enums for Script Models
enum ScriptFormat {
  FDX
  FOUNTAIN
  PDF
  TXT
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum SceneType {
  SCENE_HEADING
  ACTION
  CHARACTER
  DIALOGUE
  PARENTHETICAL
  TRANSITION
}

enum EvidenceType {
  CHARACTER_DEVELOPMENT
  PLOT_POINT
  DIALOGUE_ISSUE
  FORMATTING_ERROR
  PACING_CONCERN
  STRUCTURE_ELEMENT
  GENRE_CONVENTION
  TECHNICAL_ISSUE
  AI_INSIGHT
}

enum AnalysisType {
  COVERAGE_REPORT
  CHARACTER_ANALYSIS
  STRUCTURE_ANALYSIS
  DIALOGUE_REVIEW
  FORMATTING_CHECK
  GENRE_ANALYSIS
  QUICK_OVERVIEW
  COMPREHENSIVE
  STORY_STRUCTURE
  CHARACTER_DEVELOPMENT
  DIALOGUE_QUALITY
  PACING_FLOW
  THEME_ANALYSIS
}

enum AnalysisStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

// MVP Analysis Models
model Element {
  id          String  @id @default(cuid())
  sceneId     String  @map("scene_id")
  type        String  // 'SCENE_HEADING' | 'ACTION' | 'DIALOGUE' | 'PARENTHETICAL' | 'TRANSITION' | 'SHOT'
  charName    String? @map("char_name")
  text        String
  orderIndex  Int     @map("order_index") @default(0)

  scene Scene @relation(fields: [sceneId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([sceneId, type])
  @@map("elements")
}

model Beat {
  id          String     @id @default(cuid())
  scriptId    String     @map("script_id")
  kind        BeatKind
  page        Int?
  confidence  Decimal?   @db.Decimal(4, 2)
  timingFlag  TimingFlag? @map("timing_flag")
  rationale   String?

  script Script @relation(fields: [scriptId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([scriptId])
  @@map("beats")
}

model Note {
  id          String       @id @default(cuid())
  scriptId    String       @map("script_id")
  severity    NoteSeverity
  area        NoteArea
  sceneId     String?      @map("scene_id")
  page        Int?
  lineRef     Int?         @map("line_ref")
  evidenceId  String?      @map("evidence_id")
  excerpt     String?
  suggestion  String?
  applyHook   Json?        @map("apply_hook")
  ruleCode    String?      @map("rule_code")
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime     @default(now()) @map("updated_at") @db.Timestamptz(6)

  script   Script    @relation(fields: [scriptId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  scene    Scene?    @relation(fields: [sceneId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  evidence Evidence? @relation(fields: [evidenceId], references: [id], onUpdate: Cascade, onDelete: SetNull)

  @@index([scriptId, area, severity])
  @@index([sceneId])
  @@map("notes")
}

model Score {
  id         String        @id @default(cuid())
  scriptId   String        @map("script_id")
  category   ScoreCategory
  value      Decimal       @db.Decimal(3, 1)
  rationale  String?

  script Script @relation(fields: [scriptId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([scriptId, category], map: "uq_scores_script_category")
  @@map("scores")
}

model FeasibilityMetric {
  id                String     @id @default(cuid())
  sceneId           String     @unique @map("scene_id")
  intExt            IntExtEnum? @map("int_ext")
  location          String?
  tod               String?
  hasStunts         Boolean?   @map("has_stunts")
  hasVfx            Boolean?   @map("has_vfx")
  hasSfx            Boolean?   @map("has_sfx")
  hasCrowd          Boolean?   @map("has_crowd")
  hasMinors         Boolean?   @map("has_minors")
  hasAnimals        Boolean?   @map("has_animals")
  hasWeapons        Boolean?   @map("has_weapons")
  hasVehicles       Boolean?   @map("has_vehicles")
  hasSpecialProps   Boolean?   @map("has_special_props")
  complexityScore   Int        @default(0) @map("complexity_score")

  scene Scene @relation(fields: [sceneId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("feasibility_metrics")
}

model CharacterScene {
  characterId String  @map("character_id")
  sceneId     String  @map("scene_id")
  lines       Int     @default(0)
  words       Int     @default(0)
  onPage      Boolean @default(true) @map("on_page")

  character Character @relation(fields: [characterId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  scene     Scene     @relation(fields: [sceneId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([characterId, sceneId])
  @@index([sceneId])
  @@map("character_scenes")
}

model Subplot {
  id          String   @id @default(cuid())
  scriptId    String   @map("script_id")
  label       String
  description String?

  script Script        @relation(fields: [scriptId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  spans  SubplotSpan[]

  @@map("subplots")
}

model SubplotSpan {
  subplotId String      @map("subplot_id")
  sceneId   String      @map("scene_id")
  role      SubplotRole

  subplot Subplot @relation(fields: [subplotId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  scene   Scene   @relation(fields: [sceneId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([subplotId, sceneId])
  @@map("subplot_spans")
}

model ThemeStatement {
  id         String   @id @default(cuid())
  scriptId   String   @map("script_id")
  statement  String
  confidence Decimal? @db.Decimal(4, 2)

  script Script @relation(fields: [scriptId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("theme_statements")
}

model SceneThemeAlignment {
  sceneId   String   @id @map("scene_id")
  onTheme   Boolean  @map("on_theme")
  rationale String?

  scene Scene @relation(fields: [sceneId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("scene_theme_alignment")
}

model RiskFlag {
  id          String    @id @default(cuid())
  scriptId    String    @map("script_id")
  sceneId     String?   @map("scene_id")
  kind        RiskKind
  page        Int?
  startLine   Int?      @map("start_line")
  endLine     Int?      @map("end_line")
  snippet     String?
  confidence  Decimal?  @db.Decimal(4, 2)

  script Script @relation(fields: [scriptId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  scene  Scene?  @relation(fields: [sceneId], references: [id], onUpdate: Cascade, onDelete: SetNull)

  @@index([scriptId, kind])
  @@map("risk_flags")
}

model PageMetric {
  scriptId          String  @map("script_id")
  page              Int
  sceneLengthLines  Int?    @map("scene_length_lines")
  dialogueLines     Int?    @map("dialogue_lines")
  actionLines       Int?    @map("action_lines")
  tensionScore      Int?    @map("tension_score")
  complexityScore   Int?    @map("complexity_score")

  script Script @relation(fields: [scriptId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([scriptId, page])
  @@map("page_metrics")
}

// MVP Analysis Enums
enum BeatKind {
  INCITING
  ACT1_BREAK
  MIDPOINT
  LOW_POINT
  ACT2_BREAK
  CLIMAX
  RESOLUTION
  @@map("beat_kind")
}

enum TimingFlag {
  EARLY
  ON_TIME
  LATE
  UNKNOWN
  @@map("timing_flag")
}

enum NoteSeverity {
  HIGH
  MEDIUM
  LOW
  @@map("note_severity")
}

enum NoteArea {
  STRUCTURE
  CHARACTER
  DIALOGUE
  PACING
  THEME
  GENRE
  FORMATTING
  LOGIC
  REPRESENTATION
  LEGAL
  @@map("note_area")
}

enum IntExtEnum {
  INT
  EXT
  INT_EXT @map("INT/EXT")
  @@map("int_ext_enum")
}

enum RiskKind {
  REAL_PERSON
  TRADEMARK
  LYRICS
  DEFAMATION_RISK
  LIFE_RIGHTS
  @@map("risk_kind")
}

enum SubplotRole {
  INTRO
  DEVELOP
  CONVERGE
  RESOLVE
  @@map("subplot_role")
}

enum ScoreCategory {
  STRUCTURE
  CHARACTER
  DIALOGUE
  PACING
  THEME
  GENRE_FIT
  ORIGINALITY
  FEASIBILITY
  @@map("score_category")
}