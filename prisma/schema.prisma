generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

// Auth & RBAC Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String     @id @default(cuid())
  email             String     @unique
  emailVerified     DateTime?
  name              String?
  firstName         String?
  lastName          String?
  image             String?
  passwordHash      String?

  // Profile & Preferences
  projectType       ProjectType @default(FEATURE)
  privacyDoNotTrain Boolean     @default(true)
  retentionDays     Int         @default(90)
  emailNotifications Boolean    @default(true)

  // RBAC
  roleId            String?
  role              Role?       @relation(fields: [roleId], references: [id])
  organizationId    String?
  organization      Organization? @relation(fields: [organizationId], references: [id])

  // Timestamps
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  lastLoginAt       DateTime?

  // Billing & Plans
  stripeCustomerId  String?
  plan              PlanType     @default(FREE)
  planStartedAt     DateTime?
  planExpiresAt     DateTime?
  analysesUsed      Int          @default(0)
  analysesLimit     Int          @default(3) // Free tier default

  // Relations
  accounts          Account[]
  sessions          Session[]
  authLogs          AuthLog[]
  refreshTokens     RefreshToken[]
  organizationMemberships OrganizationMember[]
  subscriptions     Subscription[]
  usageRecords      UsageRecord[]
  scripts           Script[]
  analyses          Analysis[]

  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions Json     @default("[]")
  isDefault   Boolean  @default(false)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]

  @@map("roles")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
  members     OrganizationMember[]

  @@map("organizations")
}

model OrganizationMember {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           MemberRole   @default(MEMBER)

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("organization_members")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime

  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model AuthLog {
  id        String   @id @default(cuid())
  userId    String?
  email     String?
  action    AuthAction
  success   Boolean
  ipAddress String?
  userAgent String?
  metadata  Json?

  createdAt DateTime @default(now())

  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("auth_logs")
}

model RateLimit {
  id        String   @id @default(cuid())
  key       String   @unique
  points    Int      @default(0)
  expiresAt DateTime

  @@map("rate_limits")
}

// Enums
enum ProjectType {
  SHORT
  FEATURE
  TV
  OTHER
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
}

enum AuthAction {
  SIGN_UP
  SIGN_IN
  SIGN_OUT
  PASSWORD_RESET
  EMAIL_VERIFY
  TOKEN_REFRESH
  FAILED_LOGIN
  ACCOUNT_LOCKED
}

enum PlanType {
  FREE
  SOLO
  PRO
  SHOWRUNNER
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELED
  PAST_DUE
  UNPAID
}

// Billing & Subscription Models
model Subscription {
  id                String             @id @default(cuid())
  userId            String
  stripeSubscriptionId String?         @unique
  stripePriceId     String?
  plan              PlanType
  status            SubscriptionStatus @default(ACTIVE)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean           @default(false)
  canceledAt         DateTime?
  trialStart         DateTime?
  trialEnd           DateTime?

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model UsageRecord {
  id        String   @id @default(cuid())
  userId    String
  type      String   // "analysis", "export", etc.
  quantity  Int      @default(1)
  metadata  Json?    // Additional usage details

  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("usage_records")
}

// Script Analysis & Evidence Store Models
model Script {
  id               String   @id @default(cuid())
  userId           String
  originalFilename String
  title            String?
  author           String?
  format           ScriptFormat
  fileSize         Int
  pageCount        Int
  totalScenes      Int      @default(0)
  totalCharacters  Int      @default(0)

  // Processing status
  status           ProcessingStatus @default(PENDING)
  uploadedAt       DateTime @default(now())
  processedAt      DateTime?

  // File storage
  fileUrl          String?  // S3/storage URL for original file

  // Soft delete
  deletedAt        DateTime?

  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  scenes           Scene[]
  characters       Character[]
  analyses         Analysis[]

  @@map("scripts")
}

model Scene {
  id           String    @id @default(cuid())
  scriptId     String
  sceneNumber  String?
  type         SceneType
  content      String    @db.Text
  pageNumber   Int
  lineNumber   Int
  character    String?   // For dialogue scenes

  // Scene position and context
  orderIndex   Int       // Sequential order in script
  wordCount    Int       @default(0)

  // Analysis data will be stored here
  analysisData Json?     // Flexible storage for AI analysis results

  createdAt    DateTime  @default(now())
  deletedAt    DateTime?

  // Relations
  script       Script    @relation(fields: [scriptId], references: [id], onDelete: Cascade)
  evidences    Evidence[]

  @@index([scriptId, orderIndex])
  @@index([scriptId, type])
  @@index([scriptId, character])
  @@map("scenes")
}

model Character {
  id           String   @id @default(cuid())
  scriptId     String
  name         String
  dialogueCount Int     @default(0)
  firstAppearance Int?  // Line number of first appearance

  // Character analysis
  analysisData Json?   // AI-generated character insights

  createdAt    DateTime @default(now())
  deletedAt    DateTime?

  // Relations
  script       Script   @relation(fields: [scriptId], references: [id], onDelete: Cascade)

  @@unique([scriptId, name])
  @@map("characters")
}

model Evidence {
  id           String      @id @default(cuid())
  sceneId      String
  type         EvidenceType
  content      String      @db.Text
  context      String?     @db.Text // Surrounding context for evidence
  confidence   Float       // AI confidence score 0-1

  // Evidence metadata
  startLine    Int?        // Start line in original script
  endLine      Int?        // End line in original script
  tags         String[]    // Searchable tags

  createdAt    DateTime    @default(now())
  deletedAt    DateTime?

  // Relations
  scene        Scene       @relation(fields: [sceneId], references: [id], onDelete: Cascade)

  @@index([sceneId, type])
  @@index([type, confidence])
  @@map("evidence")
}

model Analysis {
  id           String        @id @default(cuid())
  scriptId     String
  userId       String
  type         AnalysisType
  status       AnalysisStatus @default(PENDING)

  // Analysis results
  results      Json?         // Main analysis results
  score        Float?        // Overall score if applicable
  summary      String?       @db.Text

  // Processing info
  startedAt    DateTime      @default(now())
  completedAt  DateTime?
  errorMessage String?       @db.Text
  deletedAt    DateTime?

  // Relations
  script       Script        @relation(fields: [scriptId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("analyses")
}

// Enums for Script Models
enum ScriptFormat {
  FDX
  FOUNTAIN
  PDF
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum SceneType {
  SCENE_HEADING
  ACTION
  CHARACTER
  DIALOGUE
  PARENTHETICAL
  TRANSITION
}

enum EvidenceType {
  CHARACTER_DEVELOPMENT
  PLOT_POINT
  DIALOGUE_ISSUE
  FORMATTING_ERROR
  PACING_CONCERN
  STRUCTURE_ELEMENT
  GENRE_CONVENTION
  TECHNICAL_ISSUE
  AI_INSIGHT
}

enum AnalysisType {
  COVERAGE_REPORT
  CHARACTER_ANALYSIS
  STRUCTURE_ANALYSIS
  DIALOGUE_REVIEW
  FORMATTING_CHECK
  GENRE_ANALYSIS
  QUICK_OVERVIEW
  COMPREHENSIVE
  STORY_STRUCTURE
  CHARACTER_DEVELOPMENT
  DIALOGUE_QUALITY
  PACING_FLOW
  THEME_ANALYSIS
}

enum AnalysisStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}