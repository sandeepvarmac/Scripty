generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth & RBAC Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String     @id @default(cuid())
  email             String     @unique
  emailVerified     DateTime?
  name              String?
  firstName         String?
  lastName          String?
  image             String?
  passwordHash      String?

  // Profile & Preferences
  projectType       ProjectType @default(FEATURE)
  privacyDoNotTrain Boolean     @default(true)
  retentionDays     Int         @default(90)
  emailNotifications Boolean    @default(true)

  // RBAC
  roleId            String?
  role              Role?       @relation(fields: [roleId], references: [id])
  organizationId    String?
  organization      Organization? @relation(fields: [organizationId], references: [id])

  // Timestamps
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  lastLoginAt       DateTime?

  // Relations
  accounts          Account[]
  sessions          Session[]
  authLogs          AuthLog[]
  refreshTokens     RefreshToken[]
  organizationMemberships OrganizationMember[]

  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions Json     @default("[]")
  isDefault   Boolean  @default(false)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]

  @@map("roles")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
  members     OrganizationMember[]

  @@map("organizations")
}

model OrganizationMember {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           MemberRole   @default(MEMBER)

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("organization_members")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime

  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model AuthLog {
  id        String   @id @default(cuid())
  userId    String?
  email     String?
  action    AuthAction
  success   Boolean
  ipAddress String?
  userAgent String?
  metadata  Json?

  createdAt DateTime @default(now())

  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("auth_logs")
}

model RateLimit {
  id        String   @id @default(cuid())
  key       String   @unique
  points    Int      @default(0)
  expiresAt DateTime

  @@map("rate_limits")
}

// Enums
enum ProjectType {
  SHORT
  FEATURE
  TV
  OTHER
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
}

enum AuthAction {
  SIGN_UP
  SIGN_IN
  SIGN_OUT
  PASSWORD_RESET
  EMAIL_VERIFY
  TOKEN_REFRESH
  FAILED_LOGIN
  ACCOUNT_LOCKED
}
